{"version":3,"file":"animations.js","sources":["../../../../packages/animations/src/animation_builder.ts","../../../../packages/animations/src/animation_metadata.ts","../../../../packages/animations/src/util.ts","../../../../packages/animations/src/players/animation_player.ts","../../../../packages/animations/src/players/animation_group_player.ts","../../../../packages/animations/src/private_export.ts","../../../../packages/animations/src/animations.ts","../../../../packages/animations/public_api.ts","../../../../packages/animations/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationMetadata, AnimationOptions} from './animation_metadata';\nimport {AnimationPlayer} from './players/animation_player';\n/**\n * AnimationBuilder is an injectable service that is available when the {\\@link\n * BrowserAnimationsModule BrowserAnimationsModule} or {\\@link NoopAnimationsModule\n * NoopAnimationsModule} modules are used within an application.\n * \n * The purpose if this service is to produce an animation sequence programmatically within an\n * angular component or directive.\n * \n * Programmatic animations are first built and then a player is created when the build animation is\n * attached to an element.\n * \n * ```ts\n * // remember to include the BrowserAnimationsModule module for this to work...\n * import {AnimationBuilder} from '\\@angular/animations';\n * \n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n * \n *   makeAnimation(element: any) {\n *     // first build the animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n * \n *     // then create a player from it\n *     const player = myAnimation.create(element);\n * \n *     player.play();\n *   }\n * }\n * ```\n * \n * When an animation is built an instance of {\\@link AnimationFactory AnimationFactory} will be\n * returned. Using that an {\\@link AnimationPlayer AnimationPlayer} can be created which can then be\n * used to start the animation.\n * \n * \\@experimental Animation support is experimental.\n * @abstract\n */\nexport abstract class AnimationBuilder {\n/**\n * @abstract\n * @param {?} animation\n * @return {?}\n */\nbuild(animation: AnimationMetadata|AnimationMetadata[]) {}\n}\n/**\n * An instance of `AnimationFactory` is returned from {\\@link AnimationBuilder#build\n * AnimationBuilder.build}.\n * \n * \\@experimental Animation support is experimental.\n * @abstract\n */\nexport abstract class AnimationFactory {\n/**\n * @abstract\n * @param {?} element\n * @param {?=} options\n * @return {?}\n */\ncreate(element: any, options?: AnimationOptions) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface ɵStyleData { [key: string]: string|number; }\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are created internally\n * within the Angular animation DSL.\n *\n * @experimental Animation support is experimental.\n */\nexport declare type AnimateTimings = {\n  duration: number,\n  delay: number,\n  easing: string | null\n};\n\n/**\n * `AnimationOptions` represents options that can be passed into most animation DSL methods.\n * When options are provided, the delay value of an animation can be changed and animation input\n * parameters can be passed in to change styling and timing data when an animation is started.\n *\n * The following animation DSL functions are able to accept animation option data:\n *\n * - {@link transition transition()}\n * - {@link sequence sequence()}\n * - {@link group group()}\n * - {@link query query()}\n * - {@link animation animation()}\n * - {@link useAnimation useAnimation()}\n * - {@link animateChild animateChild()}\n *\n * Programmatic animations built using {@link AnimationBuilder the AnimationBuilder service} also\n * make use of AnimationOptions.\n *\n * @experimental Animation support is experimental.\n */\nexport declare interface AnimationOptions {\n  delay?: number|string;\n  params?: {[name: string]: any};\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are created internally\n * within the Angular animation DSL when {@link animateChild animateChild()} is used.\n *\n * @experimental Animation support is experimental.\n */\nexport declare interface AnimateChildOptions extends AnimationOptions { duration?: number|string; }\n\n/**\n * Metadata representing the entry of animations. Usages of this enum are created\n * each time an animation DSL function is used.\n *\n * @experimental Animation support is experimental.\n */\nexport const enum AnimationMetadataType {\n  State = 0,\n  Transition = 1,\n  Sequence = 2,\n  Group = 3,\n  Animate = 4,\n  Keyframes = 5,\n  Style = 6,\n  Trigger = 7,\n  Reference = 8,\n  AnimateChild = 9,\n  AnimateRef = 10,\n  Query = 11,\n  Stagger = 12\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nexport const AUTO_STYLE = '*';\n\n/**\n * @experimental Animation support is experimental.\n */\nexport interface AnimationMetadata { type: AnimationMetadataType; }\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link trigger trigger animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationTriggerMetadata extends AnimationMetadata {\n  name: string;\n  definitions: AnimationMetadata[];\n  options: {params?: {[name: string]: any}}|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link state state animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationStateMetadata extends AnimationMetadata {\n  name: string;\n  styles: AnimationStyleMetadata;\n  options?: {params: {[name: string]: any}};\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link transition transition animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationTransitionMetadata extends AnimationMetadata {\n  expr: string;\n  animation: AnimationMetadata|AnimationMetadata[];\n  options: AnimationOptions|null;\n}\n\n/**\n * @experimental Animation support is experimental.\n */\nexport interface AnimationReferenceMetadata extends AnimationMetadata {\n  animation: AnimationMetadata|AnimationMetadata[];\n  options: AnimationOptions|null;\n}\n\n/**\n * @experimental Animation support is experimental.\n */\nexport interface AnimationQueryMetadata extends AnimationMetadata {\n  selector: string;\n  animation: AnimationMetadata|AnimationMetadata[];\n  options: AnimationQueryOptions|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link keyframes keyframes animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationKeyframesSequenceMetadata extends AnimationMetadata {\n  steps: AnimationStyleMetadata[];\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link style style animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationStyleMetadata extends AnimationMetadata {\n  styles: '*'|{[key: string]: string | number}|Array<{[key: string]: string | number}|'*'>;\n  offset: number|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link animate animate animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationAnimateMetadata extends AnimationMetadata {\n  timings: string|number|AnimateTimings;\n  styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link animateChild animateChild animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationAnimateChildMetadata extends AnimationMetadata {\n  options: AnimationOptions|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link useAnimation useAnimation animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationAnimateRefMetadata extends AnimationMetadata {\n  animation: AnimationReferenceMetadata;\n  options: AnimationOptions|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link sequence sequence animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationSequenceMetadata extends AnimationMetadata {\n  steps: AnimationMetadata[];\n  options: AnimationOptions|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link group group animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationGroupMetadata extends AnimationMetadata {\n  steps: AnimationMetadata[];\n  options: AnimationOptions|null;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link query query animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport declare interface AnimationQueryOptions extends AnimationOptions {\n  optional?: boolean;\n  /**\n   * Used to limit the total amount of results from the start of the query list.\n   *\n   * If a negative value is provided then the queried results will be limited from the\n   * end of the query list towards the beginning (e.g. if `limit: -3` is used then the\n   * final 3 (or less) queried results will be used for the animation).\n   */\n  limit?: number;\n}\n\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {@link stagger stagger animation function} is called.\n *\n* @experimental Animation support is experimental.\n*/\nexport interface AnimationStaggerMetadata extends AnimationMetadata {\n  timings: string|number;\n  animation: AnimationMetadata|AnimationMetadata[];\n}\n/**\n * `trigger` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations component animations metadata page} to gain a better\n * understanding of how animations in Angular are used.\n * \n * `trigger` Creates an animation trigger which will a list of {\\@link state state} and\n * {\\@link transition transition} entries that will be evaluated when the expression\n * bound to the trigger changes.\n * \n * Triggers are registered within the component annotation data under the\n * {\\@link Component#animations animations section}. An animation trigger can be placed on an element\n * within a template by referencing the name of the trigger followed by the expression value that\n * the\n * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\n * \n * Animation trigger bindings strigify values and then match the previous and current values against\n * any linked transitions. If a boolean value is provided into the trigger binding then it will both\n * be represented as `1` or `true` and `0` or `false` for a true and false boolean values\n * respectively.\n * \n * ### Usage\n * \n * `trigger` will create an animation trigger reference based on the provided `name` value. The\n * provided `animation` value is expected to be an array consisting of {\\@link state state} and\n * {\\@link transition transition} declarations.\n * \n * ```typescript\n * \\@Component({ \n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n * \n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n * \n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n * \n * ## Disable Animations\n * A special animation control binding called `\\@.disabled` can be placed on an element which will\n * then disable animations for any inner animation triggers situated within the element as well as\n * any animations on the element itself.\n * \n * When true, the `\\@.disabled` binding will prevent all animations from rendering. The example\n * below shows how to use this feature:\n * \n * ```ts\n * \\@Component({ \n *   selector: 'my-component',\n *   template: `\n *     <div [\\@.disabled]=\"isDisabled\">\n *       <div [\\@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n * \n * The `\\@childAnimation` trigger will not animate because `\\@.disabled` prevents it from happening\n * (when true).\n * \n * Note that `\\@.disbled` will only disable all animations (this means any animations running on\n * the same element will also be disabled).\n * \n * ### Disabling Animations Application-wide\n * When an area of the template is set to have animations disabled, **all** inner components will\n * also have their animations disabled as well. This means that all animations for an angular\n * application can be disabled by placing a host binding set on `\\@.disabled` on the topmost Angular\n * component.\n * \n * ```ts\n * import {Component, HostBinding} from '\\@angular/core';\n * \n * \\@Component({ \n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   \\@HostBinding('\\@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n * \n * ### What about animations that us `query()` and `animateChild()`?\n * Despite inner animations being disabled, a parent animation can {\\@link query query} for inner\n * elements located in disabled areas of the template and still animate them as it sees fit. This is\n * also the case for when a sub animation is queried by a parent and then later animated using {\\@link\n * animateChild animateChild}.\n * \n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nexport function trigger(name: string, definitions: AnimationMetadata[]): AnimationTriggerMetadata {\n  return {type: AnimationMetadataType.Trigger, name, definitions, options: {}};\n}\n/**\n * `animate` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n * \n * `animate` specifies an animation step that will apply the provided `styles` data for a given\n * amount of time based on the provided `timing` expression value. Calls to `animate` are expected\n * to be used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link\n * transition transition}.\n * \n * ### Usage\n * \n * The `animate` function accepts two input parameters: `timing` and `styles`:\n * \n * - `timing` is a string based value that can be a combination of a duration with optional delay\n * and easing values. The format for the expression breaks down to `duration delay easing`\n * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the\n * `duration` value in millisecond form.\n * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n * keyframes keyframes}. If left empty then the styles from the destination state will be collected\n * and used (this is useful when describing an animation step that will complete an animation by\n * {\\@link transition#the-final-animate-call animating to the final state}).\n * \n * ```typescript\n * // various functions for specifying timing data\n * animate(500, style(...))\n * animate(\"1s\", style(...))\n * animate(\"100ms 0.5s\", style(...))\n * animate(\"5s ease\", style(...))\n * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n * \n * // either style() of keyframes() can be used\n * animate(500, style({ background: \"red\" }))\n * animate(500, keyframes([\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n * ])\n * ```\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} timings\n * @param {?=} styles\n * @return {?}\n */\nexport function animate(\n    timings: string | number, styles: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata |\n        null = null): AnimationAnimateMetadata {\n  return {type: AnimationMetadataType.Animate, styles, timings};\n}\n/**\n * `group` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n * \n * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are\n * useful when a series of styles must be animated/closed off at different starting/ending times.\n * \n * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n * transition} and it will only continue to the next instruction once all of the inner animation\n * steps have completed.\n * \n * ### Usage\n * \n * The `steps` data that is passed into the `group` animation function can either consist of {\\@link\n * style style} or {\\@link animate animate} function calls. Each call to `style()` or `animate()`\n * within a group will be executed instantly (use {\\@link keyframes keyframes} or a {\\@link\n * animate#usage animate() with a delay value} to offset styles to be applied at a later time).\n * \n * ```typescript\n * group([\n *   animate(\"1s\", { background: \"black\" }))\n *   animate(\"2s\", { color: \"white\" }))\n * ])\n * ```\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nexport function group(\n    steps: AnimationMetadata[], options: AnimationOptions | null = null): AnimationGroupMetadata {\n  return {type: AnimationMetadataType.Group, steps, options};\n}\n/**\n * `sequence` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n * \n * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by\n * default when an array is passed as animation data into {\\@link transition transition}.)\n * \n * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n * transition} and it will only continue to the next instruction once each of the inner animation\n * steps have completed.\n * \n * To perform animation styling in parallel with other animation steps then have a look at the\n * {\\@link group group} animation function.\n * \n * ### Usage\n * \n * The `steps` data that is passed into the `sequence` animation function can either consist of\n * {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply the\n * provided styling data immediately while a call to `animate()` will apply its styling data over a\n * given time depending on its timing data.\n * \n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", { opacity: 1 }))\n * ])\n * ```\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nexport function sequence(steps: AnimationMetadata[], options: AnimationOptions | null = null):\n    AnimationSequenceMetadata {\n  return {type: AnimationMetadataType.Sequence, steps, options};\n}\n/**\n * `style` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n * \n * `style` declares a key/value object containing CSS properties/styles that can then be used for\n * {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as styling data\n * for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n * \n * ### Usage\n * \n * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs\n * to be defined.\n * \n * ```typescript\n * // string values are used for css properties\n * style({ background: \"red\", color: \"blue\" })\n * \n * // numerical (pixel) values are also supported\n * style({ width: 100, height: 0 })\n * ```\n * \n * #### Auto-styles (using `*`)\n * \n * When an asterix (`*`) character is used as a value then it will be detected from the element\n * being animated and applied as animation data when the animation starts.\n * \n * This feature proves useful for a state depending on layout and/or environment factors; in such\n * cases the styles are calculated just before the animation starts.\n * \n * ```typescript\n * // the steps below will animate from 0 to the\n * // actual height of the element\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} tokens\n * @return {?}\n */\nexport function style(\n    tokens: '*' | {[key: string]: string | number} |\n    Array<'*'|{[key: string]: string | number}>): AnimationStyleMetadata {\n  return {type: AnimationMetadataType.Style, styles: tokens, offset: null};\n}\n/**\n * `state` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n * \n * `state` declares an animation state within the given trigger. When a state is active within a\n * component then its associated styles will persist on the element that the trigger is attached to\n * (even when the animation ends).\n * \n * To animate between states, have a look at the animation {\\@link transition transition} DSL\n * function. To register states to an animation trigger please have a look at the {\\@link trigger\n * trigger} function.\n * \n * #### The `void` state\n * \n * The `void` state value is a reserved word that angular uses to determine when the element is not\n * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n * associated element is void).\n * \n * #### The `*` (default) state\n * \n * The `*` state (when styled) is a fallback state that will be used if the state that is being\n * animated is not declared within the trigger.\n * \n * ### Usage\n * \n * `state` will declare an animation state with its associated styles\n * within the given trigger.\n * \n * - `stateNameExpr` can be one or more state names separated by commas.\n * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n * the state has been reached.\n * \n * ```typescript\n * // \"void\" is a reserved name for a state and is used to represent\n * // the state in which an element is detached from from the application.\n * state(\"void\", style({ height: 0 }))\n * \n * // user-defined states\n * state(\"closed\", style({ height: 0 }))\n * state(\"open, visible\", style({ height: \"*\" }))\n * ```\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} styles\n * @param {?=} options\n * @return {?}\n */\nexport function state(\n    name: string, styles: AnimationStyleMetadata,\n    options?: {params: {[name: string]: any}}): AnimationStateMetadata {\n  return {type: AnimationMetadataType.State, name, styles, options};\n}\n/**\n * `keyframes` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n * \n * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n * by an `offset` value.\n * \n * ### Usage\n * \n * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n * animation function. Instead of applying animations from where they are currently to their\n * destination, keyframes can describe how each style entry is applied and at what point within the\n * animation arc (much like CSS Keyframe Animations do).\n * \n * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what\n * percentage of the animate time the styles will be applied.\n * \n * ```typescript\n * // the provided offset values describe when each backgroundColor value is applied.\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n * \n * Alternatively, if there are no `offset` values used within the style entries then the offsets\n * will be calculated automatically.\n * \n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nexport function keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata {\n  return {type: AnimationMetadataType.Keyframes, steps};\n}\n/**\n * `transition` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n * \n * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>\n * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting\n * and/or ending state).\n * \n * A function can also be provided as the `stateChangeExpr` argument for a transition and this\n * function will be executed each time a state change occurs. If the value returned within the\n * function is true then the associated animation will be run.\n * \n * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n * to animate to a state value and persist its styles then one or more {\\@link state animation\n * states} is expected to be defined.\n * \n * ### Usage\n * \n * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n * what the previous state is and what the current state has become. In other words, if a transition\n * is defined that matches the old/current state criteria then the associated animation will be\n * triggered.\n * \n * ```typescript\n * // all transition/state changes are defined within an animation trigger\n * trigger(\"myAnimationTrigger\", [\n *   // if a state is defined then its styles will be persisted when the\n *   // animation has fully completed itself\n *   state(\"on\", style({ background: \"green\" })),\n *   state(\"off\", style({ background: \"grey\" })),\n * \n *   // a transition animation that will be kicked off when the state value\n *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n *   transition(\"on => off\", animate(500)),\n * \n *   // it is also possible to do run the same animation for both directions\n *   transition(\"on <=> off\", animate(500)),\n * \n *   // or to define multiple states pairs separated by commas\n *   transition(\"on => off, off => void\", animate(500)),\n * \n *   // this is a catch-all state change for when an element is inserted into\n *   // the page and the destination state is unknown\n *   transition(\"void => *\", [\n *     style({ opacity: 0 }),\n *     animate(500)\n *   ]),\n * \n *   // this will capture a state change between any states\n *   transition(\"* => *\", animate(\"1s 0s\")),\n * \n *   // you can also go full out and include a function\n *   transition((fromState, toState) => {\n *     // when `true` then it will allow the animation below to be invoked\n *     return fromState == \"off\" && toState == \"on\";\n *   }, animate(\"1s 0s\"))\n * ])\n * ```\n * \n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n * \n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n * \n * #### The final `animate` call\n * \n * If the final step within the transition steps is a call to `animate()` that **only** uses a\n * timing value with **no style data** then it will be automatically used as the final animation arc\n * for the element to animate itself to the final state. This involves an automatic mix of\n * adding/removing CSS styles so that the element will be in the exact state it should be for the\n * applied state to be presented correctly.\n * \n * ```\n * // start off by hiding the element, but make sure that it animates properly to whatever state\n * // is currently active for \"myAnimationTrigger\"\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n * ])\n * ```\n * \n * ### Transition Aliases (`:enter` and `:leave`)\n * \n * Given that enter (insertion) and leave (removal) animations are so common, the `transition`\n * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*\n * => void` state changes.\n * \n * ```\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n * ])\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n * ])\n * ```\n * \n * ### Boolean values\n * if a trigger binding value is a boolean value then it can be matched using a transition\n * expression that compares `true` and `false` or `1` and `0`.\n * \n * ```\n * // in the template\n * <div [\\@openClose]=\"open ? true : false\">...</div>\n * \n * // in the component metadata\n * trigger('openClose', [\n *   state('true', style({ height: '*' })),\n *   state('false', style({ height: '0px' })),\n *   transition('false <=> true', animate(500))\n * ])\n * ```\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} stateChangeExpr\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nexport function transition(\n    stateChangeExpr: string, steps: AnimationMetadata | AnimationMetadata[],\n    options: AnimationOptions | null = null): AnimationTransitionMetadata {\n  return {type: AnimationMetadataType.Transition, expr: stateChangeExpr, animation: steps, options};\n}\n/**\n * `animation` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language.\n * \n * `var myAnimation = animation(...)` is designed to produce a reusable animation that can be later\n * invoked in another animation or sequence. Reusable animations are designed to make use of\n * animation parameters and the produced animation can be used via the `useAnimation` method.\n * \n * ```\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *     style({ opacity: '{{ end }}'}))\n * ], { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n * \n * If parameters are attached to an animation then they act as **default parameter values**. When an\n * animation is invoked via `useAnimation` then parameter values are allowed to be passed in\n * directly. If any of the passed in parameter values are missing then the default values will be\n * used.\n * \n * ```\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n * \n * If one or more parameter values are missing before animated then an error will be thrown.\n * \n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nexport function animation(\n    steps: AnimationMetadata | AnimationMetadata[],\n    options: AnimationOptions | null = null): AnimationReferenceMetadata {\n  return {type: AnimationMetadataType.Reference, animation: steps, options};\n}\n/**\n * `animateChild` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. It works by allowing a queried element to execute its own\n * animation within the animation sequence.\n * \n * Each time an animation is triggered in angular, the parent animation\n * will always get priority and any child animations will be blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations and then allow the animations to run using `animateChild`.\n * \n * The example HTML code below shows both parent and child elements that have animation\n * triggers that will execute at the same time.\n * \n * ```html\n * <!-- parent-child.component.html -->\n * <button (click)=\"exp =! exp\">Toggle</button>\n * <hr>\n * \n * <div [\\@parentAnimation]=\"exp\">\n *   <header>Hello</header>\n *   <div [\\@childAnimation]=\"exp\">\n *       one\n *   </div>\n *   <div [\\@childAnimation]=\"exp\">\n *       two\n *   </div>\n *   <div [\\@childAnimation]=\"exp\">\n *       three\n *   </div>\n * </div>\n * ```\n * \n * Now when the `exp` value changes to true, only the `parentAnimation` animation will animate\n * because it has priority. However, using `query` and `animateChild` each of the inner animations\n * can also fire:\n * \n * ```ts\n * // parent-child.component.ts\n * import {trigger, transition, animate, style, query, animateChild} from '\\@angular/animations';\n * \\@Component({ \n *   selector: 'parent-child-component',\n *   animations: [\n *     trigger('parentAnimation', [\n *       transition('false => true', [\n *         query('header', [\n *           style({ opacity: 0 }),\n *           animate(500, style({ opacity: 1 }))\n *         ]),\n *         query('\\@childAnimation', [\n *           animateChild()\n *         ])\n *       ])\n *     ]),\n *     trigger('childAnimation', [\n *       transition('false => true', [\n *         style({ opacity: 0 }),\n *         animate(500, style({ opacity: 1 }))\n *       ])\n *     ])\n *   ]\n * })\n * class ParentChildCmp {\n *   exp: boolean = false;\n * }\n * ```\n * \n * In the animation code above, when the `parentAnimation` transition kicks off it first queries to\n * find the header element and fades it in. It then finds each of the sub elements that contain the\n * `\\@childAnimation` trigger and then allows for their animations to fire.\n * \n * This example can be further extended by using stagger:\n * \n * ```ts\n * query('\\@childAnimation', stagger(100, [\n *   animateChild()\n * ]))\n * ```\n * \n * Now each of the sub animations start off with respect to the `100ms` staggering step.\n * \n * ## The first frame of child animations\n * When sub animations are executed using `animateChild` the animation engine will always apply the\n * first frame of every sub animation immediately at the start of the animation sequence. This way\n * the parent animation does not need to set any initial styling data on the sub elements before the\n * sub animations kick off.\n * \n * In the example above the first frame of the `childAnimation`'s `false => true` transition\n * consists of a style of `opacity: 0`. This is applied immediately when the `parentAnimation`\n * animation transition sequence starts. Only then when the `\\@childAnimation` is queried and called\n * with `animateChild` will it then animate to its destination of `opacity: 1`.\n * \n * Note that this feature designed to be used alongside {\\@link query query()} and it will only work\n * with animations that are assigned using the Angular animation DSL (this means that CSS keyframes\n * and transitions are not handled by this API).\n * \n * \\@experimental Animation support is experimental.\n * @param {?=} options\n * @return {?}\n */\nexport function animateChild(options: AnimateChildOptions | null = null):\n    AnimationAnimateChildMetadata {\n  return {type: AnimationMetadataType.AnimateChild, options};\n}\n/**\n * `useAnimation` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. It is used to kick off a reusable animation that is created using {\\@link\n * animation animation()}.\n * \n * \\@experimental Animation support is experimental.\n * @param {?} animation\n * @param {?=} options\n * @return {?}\n */\nexport function useAnimation(\n    animation: AnimationReferenceMetadata,\n    options: AnimationOptions | null = null): AnimationAnimateRefMetadata {\n  return {type: AnimationMetadataType.AnimateRef, animation, options};\n}\n/**\n * `query` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language.\n * \n * query() is used to find one or more inner elements within the current element that is\n * being animated within the sequence. The provided animation steps are applied\n * to the queried element (by default, an array is provided, then this will be\n * treated as an animation sequence).\n * \n * ### Usage\n * \n * query() is designed to collect mutiple elements and works internally by using\n * `element.querySelectorAll`. An additional options object can be provided which\n * can be used to limit the total amount of items to be collected.\n * \n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n * \n * query(), by default, will throw an error when zero items are found. If a query\n * has the `optional` flag set to true then this error will be ignored.\n * \n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n * \n * ### Special Selector Values\n * \n * The selector value within a query can collect elements that contain angular-specific\n * characteristics\n * using special pseudo-selectors tokens.\n * \n * These include:\n * \n *  - Querying for newly inserted/removed elements using `query(\":enter\")`/`query(\":leave\")`\n *  - Querying all currently animating elements using `query(\":animating\")`\n *  - Querying elements that contain an animation trigger using `query(\"\\@triggerName\")`\n *  - Querying all elements that contain an animation triggers using `query(\"\\@*\")`\n *  - Including the current element into the animation sequence using `query(\":self\")`\n * \n * \n *  Each of these pseudo-selector tokens can be merged together into a combined query selector\n * string:\n * \n *  ```\n *  query(':self, .record:enter, .record:leave, \\@subTrigger', [...])\n *  ```\n * \n * ### Demo\n * \n * ```\n * \\@Component({ \n *   selector: 'inner',\n *   template: `\n *     <div [\\@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n * \n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 })),\n *        query('.content', animate(1000, style({ opacity: 1 })),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n * \n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n * \n * \\@experimental Animation support is experimental.\n * @param {?} selector\n * @param {?} animation\n * @param {?=} options\n * @return {?}\n */\nexport function query(\n    selector: string, animation: AnimationMetadata | AnimationMetadata[],\n    options: AnimationQueryOptions | null = null): AnimationQueryMetadata {\n  return {type: AnimationMetadataType.Query, selector, animation, options};\n}\n/**\n * `stagger` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. It is designed to be used inside of an animation {\\@link query query()}\n * and works by issuing a timing gap between after each queried item is animated.\n * \n * ### Usage\n * \n * In the example below there is a container element that wraps a list of items stamped out\n * by an ngFor. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n * \n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [\\@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n * \n * The component code for this looks as such:\n * \n * ```ts\n * import {trigger, transition, style, animate, query, stagger} from '\\@angular/animations';\n * \\@Component({ \n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *        //...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n * \n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n * \n *   hideItems() {\n *     this.items = [];\n *   }\n * \n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *   }\n * }\n * ```\n * \n * And now for the animation trigger code:\n * \n * ```ts\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n * \n * Now each time the items are added/removed then either the opacity\n * fade-in animation will run or each removed item will be faded out.\n * When either of these animations occur then a stagger effect will be\n * applied after each item's animation is started.\n * \n * \\@experimental Animation support is experimental.\n * @param {?} timings\n * @param {?} animation\n * @return {?}\n */\nexport function stagger(\n    timings: string | number,\n    animation: AnimationMetadata | AnimationMetadata[]): AnimationStaggerMetadata {\n  return {type: AnimationMetadataType.Stagger, timings, animation};\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cb\n * @return {?}\n */\nexport function scheduleMicroTask(cb: () => any) {\n  Promise.resolve(null).then(cb);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {scheduleMicroTask} from '../util';\n\n/**\n * AnimationPlayer controls an animation sequence that was produced from a programmatic animation.\n * (see {@link AnimationBuilder AnimationBuilder} for more information on how to create programmatic\n * animations.)\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationPlayer {\n  onDone(fn: () => void): void;\n  onStart(fn: () => void): void;\n  onDestroy(fn: () => void): void;\n  init(): void;\n  hasStarted(): boolean;\n  play(): void;\n  pause(): void;\n  restart(): void;\n  finish(): void;\n  destroy(): void;\n  reset(): void;\n  setPosition(p: any /** TODO #9100 */): void;\n  getPosition(): number;\n  parentPlayer: AnimationPlayer|null;\n  readonly totalTime: number;\n  beforeDestroy?: () => any;\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class NoopAnimationPlayer implements AnimationPlayer {\nprivate _onDoneFns: Function[] = [];\nprivate _onStartFns: Function[] = [];\nprivate _onDestroyFns: Function[] = [];\nprivate _started = false;\nprivate _destroyed = false;\nprivate _finished = false;\npublic parentPlayer: AnimationPlayer|null = null;\npublic totalTime = 0;\nconstructor() {}\n/**\n * @return {?}\n */\nprivate _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonStart(fn: () => void): void { this._onStartFns.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDone(fn: () => void): void { this._onDoneFns.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDestroy(fn: () => void): void { this._onDestroyFns.push(fn); }\n/**\n * @return {?}\n */\nhasStarted(): boolean { return this._started; }\n/**\n * @return {?}\n */\ninit(): void {}\n/**\n * @return {?}\n */\nplay(): void {\n    if (!this.hasStarted()) {\n      this.triggerMicrotask();\n      this._onStart();\n    }\n    this._started = true;\n  }\n/**\n * @return {?}\n */\ntriggerMicrotask() { scheduleMicroTask(() => this._onFinish()); }\n/**\n * @return {?}\n */\nprivate _onStart() {\n    this._onStartFns.forEach(fn => fn());\n    this._onStartFns = [];\n  }\n/**\n * @return {?}\n */\npause(): void {}\n/**\n * @return {?}\n */\nrestart(): void {}\n/**\n * @return {?}\n */\nfinish(): void { this._onFinish(); }\n/**\n * @return {?}\n */\ndestroy(): void {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      if (!this.hasStarted()) {\n        this._onStart();\n      }\n      this.finish();\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n/**\n * @return {?}\n */\nreset(): void {}\n/**\n * @param {?} p\n * @return {?}\n */\nsetPosition(p: number): void {}\n/**\n * @return {?}\n */\ngetPosition(): number { return 0; }\n}\n\nfunction NoopAnimationPlayer_tsickle_Closure_declarations() {\n/** @type {?} */\nNoopAnimationPlayer.prototype._onDoneFns;\n/** @type {?} */\nNoopAnimationPlayer.prototype._onStartFns;\n/** @type {?} */\nNoopAnimationPlayer.prototype._onDestroyFns;\n/** @type {?} */\nNoopAnimationPlayer.prototype._started;\n/** @type {?} */\nNoopAnimationPlayer.prototype._destroyed;\n/** @type {?} */\nNoopAnimationPlayer.prototype._finished;\n/** @type {?} */\nNoopAnimationPlayer.prototype.parentPlayer;\n/** @type {?} */\nNoopAnimationPlayer.prototype.totalTime;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {scheduleMicroTask} from '../util';\nimport {AnimationPlayer} from './animation_player';\nexport class AnimationGroupPlayer implements AnimationPlayer {\nprivate _onDoneFns: Function[] = [];\nprivate _onStartFns: Function[] = [];\nprivate _finished = false;\nprivate _started = false;\nprivate _destroyed = false;\nprivate _onDestroyFns: Function[] = [];\npublic parentPlayer: AnimationPlayer|null = null;\npublic totalTime: number = 0;\n/**\n * @param {?} _players\n */\nconstructor(private _players: AnimationPlayer[]) {\n    let doneCount = 0;\n    let destroyCount = 0;\n    let startCount = 0;\n    const total = this._players.length;\n\n    if (total == 0) {\n      scheduleMicroTask(() => this._onFinish());\n    } else {\n      this._players.forEach(player => {\n        player.parentPlayer = this;\n        player.onDone(() => {\n          if (++doneCount >= total) {\n            this._onFinish();\n          }\n        });\n        player.onDestroy(() => {\n          if (++destroyCount >= total) {\n            this._onDestroy();\n          }\n        });\n        player.onStart(() => {\n          if (++startCount >= total) {\n            this._onStart();\n          }\n        });\n      });\n    }\n\n    this.totalTime = this._players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n  }\n/**\n * @return {?}\n */\nprivate _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n/**\n * @return {?}\n */\ninit(): void { this._players.forEach(player => player.init()); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonStart(fn: () => void): void { this._onStartFns.push(fn); }\n/**\n * @return {?}\n */\nprivate _onStart() {\n    if (!this.hasStarted()) {\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n      this._started = true;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDone(fn: () => void): void { this._onDoneFns.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDestroy(fn: () => void): void { this._onDestroyFns.push(fn); }\n/**\n * @return {?}\n */\nhasStarted() { return this._started; }\n/**\n * @return {?}\n */\nplay() {\n    if (!this.parentPlayer) {\n      this.init();\n    }\n    this._onStart();\n    this._players.forEach(player => player.play());\n  }\n/**\n * @return {?}\n */\npause(): void { this._players.forEach(player => player.pause()); }\n/**\n * @return {?}\n */\nrestart(): void { this._players.forEach(player => player.restart()); }\n/**\n * @return {?}\n */\nfinish(): void {\n    this._onFinish();\n    this._players.forEach(player => player.finish());\n  }\n/**\n * @return {?}\n */\ndestroy(): void { this._onDestroy(); }\n/**\n * @return {?}\n */\nprivate _onDestroy() {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      this._onFinish();\n      this._players.forEach(player => player.destroy());\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n/**\n * @return {?}\n */\nreset(): void {\n    this._players.forEach(player => player.reset());\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n/**\n * @param {?} p\n * @return {?}\n */\nsetPosition(p: number): void {\n    const /** @type {?} */ timeAtPosition = p * this.totalTime;\n    this._players.forEach(player => {\n      const /** @type {?} */ position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n      player.setPosition(position);\n    });\n  }\n/**\n * @return {?}\n */\ngetPosition(): number {\n    let /** @type {?} */ min = 0;\n    this._players.forEach(player => {\n      const /** @type {?} */ p = player.getPosition();\n      min = Math.min(p, min);\n    });\n    return min;\n  }\n/**\n * @return {?}\n */\nget players(): AnimationPlayer[] { return this._players; }\n/**\n * @return {?}\n */\nbeforeDestroy(): void {\n    this.players.forEach(player => {\n      if (player.beforeDestroy) {\n        player.beforeDestroy();\n      }\n    });\n  }\n}\n\nfunction AnimationGroupPlayer_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationGroupPlayer.prototype._onDoneFns;\n/** @type {?} */\nAnimationGroupPlayer.prototype._onStartFns;\n/** @type {?} */\nAnimationGroupPlayer.prototype._finished;\n/** @type {?} */\nAnimationGroupPlayer.prototype._started;\n/** @type {?} */\nAnimationGroupPlayer.prototype._destroyed;\n/** @type {?} */\nAnimationGroupPlayer.prototype._onDestroyFns;\n/** @type {?} */\nAnimationGroupPlayer.prototype.parentPlayer;\n/** @type {?} */\nAnimationGroupPlayer.prototype.totalTime;\n/** @type {?} */\nAnimationGroupPlayer.prototype._players;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport {AnimationGroupPlayer as ɵAnimationGroupPlayer} from './players/animation_group_player';\nexport const /** @type {?} */ ɵPRE_STYLE = '!';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation package.\n */\nexport {AnimationBuilder, AnimationFactory} from './animation_builder';\nexport {AnimationEvent} from './animation_event';\nexport {AUTO_STYLE, AnimateChildOptions, AnimateTimings, AnimationAnimateChildMetadata, AnimationAnimateMetadata, AnimationAnimateRefMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationOptions, AnimationQueryMetadata, AnimationQueryOptions, AnimationReferenceMetadata, AnimationSequenceMetadata, AnimationStaggerMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, AnimationTriggerMetadata, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵStyleData} from './animation_metadata';\nexport {AnimationPlayer, NoopAnimationPlayer} from './players/animation_player';\n\nexport {ɵAnimationGroupPlayer,ɵPRE_STYLE} from './private_export';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\nexport {AnimationBuilder,AnimationFactory,AnimationEvent,AUTO_STYLE,AnimateChildOptions,AnimateTimings,AnimationAnimateChildMetadata,AnimationAnimateMetadata,AnimationAnimateRefMetadata,AnimationGroupMetadata,AnimationKeyframesSequenceMetadata,AnimationMetadata,AnimationMetadataType,AnimationOptions,AnimationQueryMetadata,AnimationQueryOptions,AnimationReferenceMetadata,AnimationSequenceMetadata,AnimationStaggerMetadata,AnimationStateMetadata,AnimationStyleMetadata,AnimationTransitionMetadata,AnimationTriggerMetadata,animate,animateChild,animation,group,keyframes,query,sequence,stagger,state,style,transition,trigger,useAnimation,ɵStyleData,AnimationPlayer,NoopAnimationPlayer,ɵAnimationGroupPlayer,ɵPRE_STYLE} from './src/animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {AnimationBuilder,AnimationFactory,AnimationEvent,AUTO_STYLE,AnimateChildOptions,AnimateTimings,AnimationAnimateChildMetadata,AnimationAnimateMetadata,AnimationAnimateRefMetadata,AnimationGroupMetadata,AnimationKeyframesSequenceMetadata,AnimationMetadata,AnimationMetadataType,AnimationOptions,AnimationQueryMetadata,AnimationQueryOptions,AnimationReferenceMetadata,AnimationSequenceMetadata,AnimationStaggerMetadata,AnimationStateMetadata,AnimationStyleMetadata,AnimationTransitionMetadata,AnimationTriggerMetadata,animate,animateChild,animation,group,keyframes,query,sequence,stagger,state,style,transition,trigger,useAnimation,ɵStyleData,AnimationPlayer,NoopAnimationPlayer,ɵAnimationGroupPlayer,ɵPRE_STYLE} from './public_api';\n"]}